{
  "possibleExceptionCodes": {
    "missingParameter": "MissingRequiredMethodParameter",
    "tooManyParameters": "MethodCallActualParameterCountExceedsFormalParameterCount",
    "missingTokenAtEnd": "ExpectedTokenButFoundEndOfExpression",
    "missingExpectedToken": "UnableToLocateExpectedCharactersInExpression",
    "tooManyComparisons": "ExpectedZeroOrOneComparisonSymbolsInExpressionButFoundMoreThanOne",
    "externalMethodException": "ExternalMethodInvocationCausedAnException"
  },
  "testGroups": [
    {
      "name": "Math expressions",
      "source": {
        "one": 1,
        "two": 2,
        "three": 3
      },
      "tests": [
        {
          "name": "Addition with valueOf() produces correct result",
          "transformer": {
            "value": "#valueOf($.one) + #valueOf($.two) + #valueOf($.three)"
          },
          "result": {
            "value": 6
          }
        },
        {
          "name": "Multiplication with valueOf() produces correct result",
          "transformer": {
            "value": "#valueOf($.one) * #valueOf($.two) * #valueOf($.three)"
          },
          "result": {
            "value": 6
          }
        },
        {
          "name": "Subtraction with valueOf() produces correct result",
          "transformer": {
            "value": "#valueOf($.one) - #valueOf($.two) - #valueOf($.three)"
          },
          "result": {
            "value": -4
          }
        },
        {
          "name": "Division with valueOf() produces correct result",
          "transformer": {
            "value": "#valueOf($.one) / #valueOf($.two) / #valueOf($.three)"
          },
          "result": {
            "value": 0.16666666666666666
          }
        },
        {
          "name": "Addition with eval() and literals produces correct result",
          "transformer": {
            "value": "#eval('1 + 2 + 3')"
          },
          "result": {
            "value": 6
          }
        },
        {
          "name": "Multiplication with eval() and literals produces correct result",
          "transformer": {
            "value": "#eval('1 * 2 * 3')"
          },
          "result": {
            "value": 6
          }
        },
        {
          "name": "Subtraction with eval() and literals produces correct result",
          "transformer": {
            "value": "#eval('1 - 2 - 3')"
          },
          "result": {
            "value": -4
          }
        },
        {
          "name": "Division with eval() and literals produces correct result",
          "transformer": {
            "value": "#eval('1 / 2 / 3')"
          },
          "result": {
            "value": 0.16666666666666666
          }
        },
        {
          "name": "Parentheses will determine evaluation precedence",
          "transformer": {
            "value": "#eval('(1 + 2) * (3 - 1) / 2)')"
          },
          "result": {
            "value": 3
          }
        }
      ]
    },
    {
      "name": "Comparison expressions",
      "source": {
        "one": 1,
        "two": 2,
        "three": 3
      },
      "tests": [
        {
          "name": "Comparison expressions will evaluate literals correctly",
          "transformer": {
            "equality1": "#eval('1 = 1')",
            "equality2": "#eval('1 = 2')",
            "inequality1": "#eval('1 != 2')",
            "inequality2": "#eval('1 != 1')",
            "lessThan1": "#eval('1 < 2')",
            "lessThan2": "#eval('1 < 1')",
            "lessThan3": "#eval('1 < 0')",
            "greaterThan1": "#eval('2 > 1')",
            "greaterThan2": "#eval('1 > 1')",
            "greaterThan3": "#eval('0 > 1')",
            "lessThanOrEquals1": "#eval('1 <= 1')",
            "lessThanOrEquals2": "#eval('1 <= 2')",
            "greaterThanOrEquals1": "#eval('1 >= 1')",
            "greaterThanOrEquals2": "#eval('2 >= 1')"
          },
          "result": {
            "equality1": true,
            "equality2": false,
            "inequality1": true,
            "inequality2": false,
            "lessThan1": true,
            "lessThan2": false,
            "lessThan3": false,
            "greaterThan1": true,
            "greaterThan2": false,
            "greaterThan3": false,
            "lessThanOrEquals1": true,
            "lessThanOrEquals2": true,
            "greaterThanOrEquals1": true,
            "greaterThanOrEquals2": true
          }
        }
      ]
    },
    {
      "name": "Operations on an empty source document",
      "source": {},
      "tests": [
        {
          "name": "Range variable set to empty string and read verbatim results in an empty string value",
          "transformer": {
            "@x": "",
            "value": "@x"
          },
          "result": {
            "value": ""
          }
        },
        {
          "name": "Range variable set to null and read verbatim results in a null value",
          "transformer": {
            "@x": "#valueOf($.missing)",
            "value": "@x"
          },
          "result": {
            "value": null
          }
        },
        {
          "name": "Range variable indirectly set to null and read verbatim results in a null value",
          "transformer": {
            "@x": null,
            "value": "@x"
          },
          "result": {
            "value": null
          }
        },
        {
          "name": "Range variable read without being set results in a null value",
          "transformer": {
            "value": "@x"
          },
          "result": {
            "value": null
          }
        },
        {
          "name": "The valueOf call returns null when a path pointing to nothing is used",
          "transformer": {
            "value": "#valueOf($.missing)"
          },
          "result": {
            "value": null
          }
        },
        {
          "name": "Missing initial hash sign for method will result in using the literal value",
          "transformer": {
            "value": "valueOf($.missing)"
          },
          "result": {
            "value": "valueOf($.missing)"
          }
        }
      ]
    },
    {
      "name": "Incorrect math and comparison operator usage that provokes errors",
      "source": {},
      "tests": [
        {
          "name": "Multiple equals signs present in expression",
          "transformer": {
            "value": "#eval('1 = 1 = 1')"
          },
          "exceptionCode": "externalMethodException",
          "innerExceptionCode": "tooManyComparisons"
        }
      ]
    },
    {
      "name": "Incorrect method signatures that provoke errors",
      "source": {},
      "tests": [
        {
          "name": "Single parameter required but zero were provided",
          "transformer": {
            "value": "#valueOf()"
          },
          "exceptionCode": "missingParameter"
        },
        {
          "name": "Too many parameters provided for non-variadic method",
          "transformer": {
            "value": "#valueOf($.missing, $.extra)"
          },
          "exceptionCode": "tooManyParameters"
        },
        {
          "name": "Closing parenthesis is missing",
          "transformer": {
            "value": "#valueOf($.missing"
          },
          "exceptionCode": "missingTokenAtEnd"
        },
        {
          "name": "Opening parenthesis is missing",
          "transformer": {
            "value": "#valueOf$.missing)"
          },
          "exceptionCode": "missingExpectedToken"
        }
      ]
    }
  ]
}